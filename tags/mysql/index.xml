<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 星河</title>
    <link>/tags/mysql/</link>
    <description>Recent content in Mysql on 星河</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 18 Oct 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库</title>
      <link>/post/2019/10/18/8/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019/10/18/8/</guid>
      <description>&lt;h2 id=&#34;数据库架构&#34;&gt;数据库架构&lt;/h2&gt;&#xA;&lt;h3 id=&#34;数据库设计&#34;&gt;数据库设计&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序实例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储管理&lt;/li&gt;&#xA;&lt;li&gt;缓存机制&lt;/li&gt;&#xA;&lt;li&gt;SQL 解析&lt;/li&gt;&#xA;&lt;li&gt;日志管理&lt;/li&gt;&#xA;&lt;li&gt;权限划分&lt;/li&gt;&#xA;&lt;li&gt;容灾机制&lt;/li&gt;&#xA;&lt;li&gt;索引管理&lt;/li&gt;&#xA;&lt;li&gt;锁管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;存储（文件系统）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;索引模块&#34;&gt;索引模块&lt;/h3&gt;&#xA;&lt;p&gt;官方方对索引的定义为：索引是帮助 MySQL 高效获取数据的数据结构&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为什么要用索引&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;快速查询数据&lt;/li&gt;&#xA;&lt;li&gt;保证数据的唯一性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;索引的优缺点&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大大加快数据检索速度&lt;/li&gt;&#xA;&lt;li&gt;创建唯一索引，保证数据库表中每行数据的唯一性&lt;/li&gt;&#xA;&lt;li&gt;加速表之间的连接&lt;/li&gt;&#xA;&lt;li&gt;减少查询中分组和排序的时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要占用物理空间&lt;/li&gt;&#xA;&lt;li&gt;对表中数据进行增加、删除和修改时索引也要更新，降低了数据维护速度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;什么样的信息能成为索引&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主键、唯一键以及普通键等等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;索引的数据结构&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;生成索引，建立二叉查找树进行二分查找 效率 O(logn)&lt;/li&gt;&#xA;&lt;li&gt;生成索引，建立 B-Tree 进行查找 效率 O(logn)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;B-Tree&lt;/li&gt;&#xA;&lt;li&gt;根节点至少包括两个孩子&lt;/li&gt;&#xA;&lt;li&gt;树中每个节点最多含有 m 个孩子(m&amp;gt;=2)&lt;/li&gt;&#xA;&lt;li&gt;除根节点和叶子节点外，其他每个节点至少有 ceil(m/2)个孩子&lt;/li&gt;&#xA;&lt;li&gt;所有叶子节点都位于同一层&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;生成索引，建立 B+-Tree 进行查找（主流）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义基本与 B-Tree 一致&lt;/li&gt;&#xA;&lt;li&gt;非叶子节点的子树指针与关键字个数相同&lt;/li&gt;&#xA;&lt;li&gt;非叶子节点仅使用索引，数据都保存在叶子节点中&lt;/li&gt;&#xA;&lt;li&gt;所有叶子节点均有一个链指针指向下一个叶子节点&lt;/li&gt;&#xA;&lt;li&gt;B+-Tree 更适合用来做存储引擎&#xA;&lt;ul&gt;&#xA;&lt;li&gt;B+树的磁盘读写代价更低&lt;/li&gt;&#xA;&lt;li&gt;B+树的查询效率更加稳定&lt;/li&gt;&#xA;&lt;li&gt;B+树更有利于对数据库的扫描&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;生成索引，建立 Hash 结构进行查找&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查询效率更高&lt;/li&gt;&#xA;&lt;li&gt;缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仅仅能满足&amp;quot;=&amp;quot;，&amp;ldquo;IN&amp;rdquo;，不能使用范围查询&lt;/li&gt;&#xA;&lt;li&gt;无法被用来避免数据的排序操作&lt;/li&gt;&#xA;&lt;li&gt;不能利用部分索引键查询&lt;/li&gt;&#xA;&lt;li&gt;不能避免表扫码&lt;/li&gt;&#xA;&lt;li&gt;遇到大量 Hash 值相等的情况后性能并不一定就会比 B-Tree 索引高&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;BitMap 索引&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;密集索引和稀疏索引的区别&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
