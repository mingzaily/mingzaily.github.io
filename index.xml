<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on 星河</title><link>/</link><description>Recent content in Home on 星河</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 25 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>统一管理 Protocol Buffer，API 大仓设计与实现</title><link>/post/2024/05/25/59/</link><pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate><guid>/post/2024/05/25/59/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>目前公司采用 protocol buffer 作为 IDL，虽然可以根据 API 定义，轻松生成客户端和服务端的代码。但是对于跨项目的接口，会增加项目之间的耦合性。例如 A 服务对外提供了一个接口，B 服务去调用。那么就需要根据 A 服务的 proto 文件，生成客户端代码，并拷贝给 B。如果联调期间，A 服务改动了该接口，还需重复前面的步骤，非常繁琐&lt;/p>
&lt;h2 id="方案">方案&lt;/h2>
&lt;p>常见的几种解决方案，煎鱼大佬已经描述得很详细了（&lt;a href="https://mp.weixin.qq.com/s/cBXZjg_R8MLFDJyFtpjVVQ">真是头疼，Proto 代码到底放哪里？&lt;/a>）&lt;/p>
&lt;ul>
&lt;li>方案一：api 大仓 + git submodule（b 站）&lt;/li>
&lt;li>方案二：api 大仓 + git submodule + 每个项目生成代码专有仓库&lt;/li>
&lt;li>方案三：每个项目都有一个 api 仓库，包含生成的代码&lt;/li>
&lt;li>方案四：api 大仓 + api 生成代码的集中仓库&lt;/li>
&lt;/ul>
&lt;p>具体方案的优缺点 yuyy 博主已经写清楚了。
权衡了下，和博主一样选择方案四。&lt;/p>
&lt;h2 id="具体实现">具体实现&lt;/h2>
&lt;p>&lt;a href="https://imgse.com/i/pklP974">&lt;img src="https://s21.ax1x.com/2024/05/25/pklP974.png" alt="pklP974.png">&lt;/a>&lt;/p>
&lt;h3 id="drone-文件">DRONE 文件&lt;/h3>
&lt;pre>&lt;code class="language-shell">$ tree -L 1
.
├── Dockerfile
├── Makefile
├── README.md
├── apis-go.gen.yml
├── apis-go.sh
├── apis-swagger.gen.yml
├── apis-swagger.sh
├── auth-center
├── budget-center
├── common
├── consume-order
├── consume-quota-center
├── consume-rule-to-third
├── datacenter
├── fino-multi-env-center
├── finobase
├── finoconsume
├── invoice
├── mng-center
├── mq-center
├── notify-center
├── org-arch-center
├── org-asset-center
├── org-order-center
├── org-recharge-center
├── org-settle-center
├── pubsvc
├── pushcenter
├── right-recharge
├── snowflake
├── task-center
├── third-consume-order
└── timer

26 directories, 7 files
&lt;/code>&lt;/pre>
&lt;h3 id="droneyaml">.drone.yaml&lt;/h3>
&lt;pre>&lt;code class="language-yaml">kind: pipeline
type: docker
name: apis

workspace:
 base: /app
 path: ${DRONE_REPO_NAME}

steps:
 - name: 检查proto文件
 image: reg.xxxx.com/golang/apis-generate-go:1.0.0
 pull: if-not-exists
 volumes:
 - name: buf-cache
 path: /app/buf/.cache
 commands:
 - buf lint

 - name: 编译proto文件
 image: reg.xxxx.com/golang/apis-generate-go:1.0.0
 pull: if-not-exists
 volumes:
 - name: buf-cache
 path: /app/buf/.cache
 environment:
 BUF_CACHE_DIR: /app/buf/.cache
 TARGET_REPO: apis-go
 TARGET_REPO_ADDR: git@gogs.xxxx.com:fino/apis-go.git
 SSH_PRIVATE_KEY:
 from_secret: ssh_private_key
 commands:
 - sh ./apis-go.sh

 - name: 生成swagger文件
 image: reg.xxxx.com/golang/apis-generate-go:1.0.0
 pull: if-not-exists
 volumes:
 - name: buf-cache
 path: /app/buf/.cache
 environment:
 BUF_CACHE_DIR: /app/buf/.cache
 TARGET_REPO: apis-swagger
 TARGET_REPO_ADDR: git@gogs.xxxx.com:fino/apis-swagger.git
 SSH_PRIVATE_KEY:
 from_secret: ssh_private_key
 commands:
 - sh ./apis-swagger.sh

 - name: 通知
 image: plugins/webhook
 pull: if-not-exists
 settings:
 urls: https://oapi.dingtalk.com/robot/send?access_token=xxxx
 content_type: application/json
 template: |
 {
 &amp;quot;msgtype&amp;quot;: &amp;quot;text&amp;quot;,
 &amp;quot;text&amp;quot;: {
 &amp;quot;content&amp;quot;: &amp;quot;Proto \n &amp;gt; 构建结果: {{ build.status }} \n &amp;gt; 代码分支: {{ build.branch }} \n &amp;gt; 编译详情: {{ build.link }} \n &amp;gt; 提交信息: {{ build.message }} \n &amp;gt; 提交发起: {{ build.author }} &amp;quot;
 }
 }

volumes: # 定义流水线挂载目录，用于共享数据
 - name: buf-cache
 host:
 path: /home/docker/drone/buf/.cache # 从宿主机中挂载的目录
&lt;/code>&lt;/pre>
&lt;p>&lt;code>ssh_private_key&lt;/code> 经过&lt;code>echo '私钥文件' | base64&lt;/code>生成，并配置在 DRONE 的 Secrets 上
&lt;code>buf-cache&lt;/code> 是 drone 挂载硬盘，设置 buf 缓存，加快构建速度
&lt;code>reg.xxxx.com/golang/apis-generate-go:1.0.0&lt;/code> 封装的一个包含 buf 命令的镜像&lt;/p></description></item><item><title>Mac 配置 zsh</title><link>/post/2024/02/05/54/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>/post/2024/02/05/54/</guid><description>&lt;h2 id="1-使用-zsh-作为默认-shell">1. 使用 zsh 作为默认 shell&lt;/h2>
&lt;p>从 macOS Catalina 版开始，您的 Mac 将使用 zsh 作为默认登录 Shell 和交互式 Shell。您还可以在较低版本的 macOS 中将 zsh 设置为默认 Shell。&lt;/p>
&lt;pre>&lt;code class="language-bash">chsh -s /bin/zsh
&lt;/code>&lt;/pre>
&lt;p>参看：&lt;a href="https://support.apple.com/zh-cn/HT208050">在 Mac 上将 zsh 用作默认 Shell&lt;/a>&lt;/p>
&lt;h2 id="2-安装-oh-my-zsh">2. 安装 oh-my-zsh&lt;/h2>
&lt;h3 id="自动安装">自动安装&lt;/h3>
&lt;pre>&lt;code class="language-bash">sh -c &amp;quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>也可以手动安装：&lt;/p>
&lt;h3 id="手动安装">手动安装&lt;/h3>
&lt;p>下载 oh-my-zsh&lt;/p>
&lt;pre>&lt;code class="language-bash">git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
&lt;/code>&lt;/pre>
&lt;p>备份原有 ~/.zshrc（如果有）&lt;/p>
&lt;pre>&lt;code class="language-bash">cp ~/.zshrc ~/.zshrc.bak
&lt;/code>&lt;/pre>
&lt;p>从模板创建 zsh 配置文件&lt;/p>
&lt;pre>&lt;code>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/code>&lt;/pre>
&lt;h2 id="3-更改-zsh-主题">3. 更改 zsh 主题&lt;/h2>
&lt;p>主题样式 &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">这里&lt;/a> 查看。&lt;/p></description></item><item><title>RSA 加解密</title><link>/post/2024/02/05/55/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>/post/2024/02/05/55/</guid><description>&lt;h2 id="rsa-加密简介">RSA 加密简介&lt;/h2>
&lt;p>RSA 加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。是由一对密钥来进行加解密的过程，分别称为公钥和私钥。两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。通常个人保存私钥，公钥是公开的（可能同时多人持有）。&lt;/p>
&lt;h2 id="rsa-加密签名区别">RSA 加密、签名区别&lt;/h2>
&lt;p>加密和签名都是为了安全性考虑，但略有不同。常有人问加密和签名是用私钥还是公钥？其实都是对加密和签名的作用有所混淆。简单的说，加密是为了防止信息被泄露，而签名是为了防止信息被篡改。这里举 2 个例子说明。&lt;/p>
&lt;h4 id="第一个场景战场上b-要给-a-传递一条消息内容为某一指令">第一个场景：战场上，B 要给 A 传递一条消息，内容为某一指令。&lt;/h4>
&lt;p>RSA 的加密过程如下：&lt;/p>
&lt;p>（1）A 生成一对密钥（公钥和私钥），私钥不公开，A 自己保留。公钥为公开的，任何人可以获取。&lt;/p>
&lt;p>（2）A 传递自己的公钥给 B，B 用 A 的公钥对消息进行加密。&lt;/p>
&lt;p>（3）A 接收到 B 加密的消息，利用 A 自己的私钥对消息进行解密。&lt;/p>
&lt;p>在这个过程中，只有 2 次传递过程，第一次是 A 传递公钥给 B，第二次是 B 传递加密消息给 A，即使都被敌方截获，也没有危险性，因为只有 A 的私钥才能对消息进行解密，防止了消息内容的泄露。&lt;/p>
&lt;h4 id="第二个场景a-收到-b-发的消息后需要进行回复收到">第二个场景：A 收到 B 发的消息后，需要进行回复“收到”。&lt;/h4>
&lt;p>RSA 签名的过程如下：&lt;/p>
&lt;p>（1）A 生成一对密钥（公钥和私钥），私钥不公开，A 自己保留。公钥为公开的，任何人可以获取。&lt;/p>
&lt;p>（2）A 用自己的私钥对消息加签，形成签名，并将加签的消息和消息本身一起传递给 B。&lt;/p>
&lt;p>（3）B 收到消息后，在获取 A 的公钥进行验签，如果验签出来的内容与消息本身一致，证明消息是 A 回复的。&lt;/p>
&lt;p>在这个过程中，只有 2 次传递过程，第一次是 A 传递加签的消息和消息本身给 B，第二次是 B 获取 A 的公钥，即使都被敌方截获，也没有危险性，因为只有 A 的私钥才能对消息进行签名，即使知道了消息内容，也无法伪造带签名的回复给 B，防止了消息内容的篡改。&lt;/p></description></item><item><title>关于敏感数据加密的设计</title><link>/post/2023/08/31/49/</link><pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate><guid>/post/2023/08/31/49/</guid><description>&lt;ol>
&lt;li>
&lt;p>查询用 hash ，使用用加密。&lt;/p>
&lt;blockquote>
&lt;p>cellphone_enc, cellphone_hash, id_enc,id_hash. 如果还要查询归属地的，再加一个 phone_meta 里面只存前 7 位即可&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>加密后如何查询才能击中索引；&lt;/p>
&lt;blockquote>
&lt;p>使用 hash 查询。
加密字段只允许精准查询，不允许模糊。
如果一定要模糊，那也是有限制的模糊，提前定好模糊规则，根据模糊规则提前预留相关数据，再进行加密。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>用户身份如何验证（手机号、身份证）；&lt;/p>
&lt;blockquote>
&lt;p>验证后再加密，或者允许解密。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>所以你需要&lt;/p>
&lt;ol>
&lt;li>一个专用于加密解密的服务。
所有加密解密都访问该服务。
可访问数据库的人，秘钥管理人，加密服务管理人，这三方不能有任何一方有办法获取到所有要素。&lt;/li>
&lt;li>调用解密必须有日志。&lt;/li>
&lt;/ol>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>不同业务场景对脱敏的要求是不一样的。我们公司的要求是，任何人任何时候都不能看到明文，明文只出现在内存中。
有时候，脱敏并不是要求看不到明文，而是要求 不要让人在看到 1 条明文时，再看到与之相关的其他明文，进而推测出业务信息，例如同时看到姓名与手机号。当然，这与你们公司的具体场景有关。&lt;/li>
&lt;li>解密后，明文在内存中，如果被 log ，一直面临风险，所以需要对日志进行审核。&lt;/li>
&lt;li>现在有些数据库或者数据库中间件支持字段脱敏。你可以参考他们的方案。&lt;/li>
&lt;/ol></description></item><item><title>Go 面试题目</title><link>/post/2023/03/15/44/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><guid>/post/2023/03/15/44/</guid><description>&lt;ol>
&lt;li>slice 底层原理、扩容机制&lt;/li>
&lt;li>map 底层原理、扩容机制&lt;/li>
&lt;li>channel 底层原理 环形缓存+双队列&lt;/li>
&lt;li>context 原理、应用场景&lt;/li>
&lt;li>GMP模型&lt;/li>
&lt;li>GC策略&lt;/li>
&lt;li>new 和 make 的区别&lt;/li>
&lt;li>map 如何知道自己处于竞争状态&lt;/li>
&lt;li>defer、recover、panic 实现原理&lt;/li>
&lt;li>二叉树 树的遍历 前中后序遍历、深度和广度&lt;/li>
&lt;li>平衡二叉树 左旋转、右旋转&lt;/li>
&lt;li>分布式一致性 ACID、CAP、BASE理论推荐&lt;/li>
&lt;li>Mysql 分库分表方式&lt;/li>
&lt;/ol></description></item><item><title>Golang 简易WS服务 - 客户端</title><link>/post/2023/02/21/42/</link><pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate><guid>/post/2023/02/21/42/</guid><description>&lt;p>客户端代码较为简单&lt;/p>
&lt;pre>&lt;code class="language-golang">
type SocketClient struct {
	host string
	isClosed chan bool
	log *logger.Log // 自定义的log包
}

type wsMessage struct {
	Type int `json:&amp;quot;type&amp;quot;`
	Data interface{} `json:&amp;quot;data&amp;quot;`
}

func NewSocketClient(configPath, logPath, host string) *SocketClient {
	w := io.MultiWriter(os.Stdout)
	if logPath != &amp;quot;&amp;quot; {
		f, err := util.OpenFile(logPath)
		if err != nil {
			panic(err)
		}
		w = io.MultiWriter(os.Stdout, f)
	}

	return &amp;amp;SocketClient{
		host: host,
		isClosed: make(chan bool),
		log: logger.New(w, logger.LINFO, log.LstdFlags|log.Lmsgprefix),
	}
}

func (s *SocketClient) Start() {
	// 设置在线
	ClientStatus = ClientStatusOnline

	// 连接服务器
	u := url.URL{Scheme: &amp;quot;ws&amp;quot;, Host: s.host, Path: &amp;quot;/socket&amp;quot;}
	s.log.Info(&amp;quot;正在连接到&amp;quot;, u.String())

	conn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
	if err != nil {
		s.log.ErrorF(&amp;quot;连接到服务器错误: %v&amp;quot;, err)
	}
	defer conn.Close()

	s.log.Info(&amp;quot;已连接到服务器&amp;quot;)

	interrupt := make(chan os.Signal, 1)

	// 监听中断信号
	signal.Notify(interrupt, syscall.SIGKILL, syscall.SIGINT, syscall.SIGTERM, os.Kill)
	// 心跳包
	go s.pingHandler(conn)
	// 接收消息
	go s.receiveHandler(conn)

	for {
		select {
		case &amp;lt;-interrupt:
			s.log.Info(&amp;quot;收到SIGINT中断信号，正在关闭ws连接。。。&amp;quot;)
			_ = conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, &amp;quot;&amp;quot;), time.Now().Add(time.Second))
			select {
			case &amp;lt;-s.isClosed:
				s.log.Info(&amp;quot;WS链接已关闭，退出中。。。&amp;quot;)
			case &amp;lt;-time.After(time.Duration(1) * time.Second):
				s.log.Info(&amp;quot;关闭ws链接超时，退出中。。。&amp;quot;)
			}
			return
		case &amp;lt;-s.isClosed:
			s.log.Info(&amp;quot;ws链接已关闭，退出中。。。&amp;quot;)
			return
		}
	}
}

func (s *SocketClient) pingHandler(conn *websocket.Conn) {
	ticker := time.NewTicker(pingTime)
	for {
		select {
		case &amp;lt;-ticker.C:
			status := strconv.FormatInt(int64(ClientStatus), 10)
			err := conn.WriteMessage(websocket.PingMessage, []byte(status))
			if err != nil {
				s.log.ErrorF(&amp;quot;发送心跳包错误: %v&amp;quot;, err)
				return
			}
		case &amp;lt;-s.isClosed:
			return
		}
	}
}

func (s *SocketClient) receiveHandler(ws *websocket.Conn) {
	defer close(s.isClosed)
	for {
		messageType, message, err := ws.ReadMessage()
		if err != nil {
			s.log.ErrorF(&amp;quot;读取消息 %v&amp;quot;, err)
			return
		}
		switch messageType {
		case websocket.TextMessage:
			var textMessage *wsMessage

			err = json.Unmarshal(message, &amp;amp;textMessage)
			if err != nil {
				s.log.ErrorF(&amp;quot;消息格式错误: %v&amp;quot;, err)
				break
			}

			switch textMessage.Type {
			 ...
			}
		}
	}
}

&lt;/code>&lt;/pre></description></item><item><title>Golang 简易WS服务 - 服务端</title><link>/post/2023/02/21/39/</link><pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate><guid>/post/2023/02/21/39/</guid><description>&lt;h2 id="本次开发主要使用了gorilla-websocket软件包">本次开发主要使用了Gorilla Websocket软件包&lt;/h2>
&lt;h3 id="客户端结构体">客户端结构体&lt;/h3>
&lt;p>维护socket连接，保存客户端信息&lt;/p>
&lt;h4 id="代码">代码&lt;/h4>
&lt;pre>&lt;code class="language-golang">package contorller

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;git.myscrm.cn/vr/server-yk-app-builder/model&amp;quot;
	&amp;quot;git.myscrm.cn/vr/server-yk-app-builder/pkg/enum&amp;quot;
	&amp;quot;git.myscrm.cn/vr/server-yk-app-builder/pkg/logger&amp;quot;
	&amp;quot;git.myscrm.cn/vr/server-yk-app-builder/pkg/response&amp;quot;
	&amp;quot;github.com/gorilla/websocket&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;
)

const (
	// pingWait is the maximum time in seconds to wait for a ping from
	pingWait = 20 * time.Second
	// Maximum message size allowed from peer.
	maxMessageSize = 512
)

type wsClient struct {
	manager *wsManager
	id string
	desc string
	conn *websocket.Conn
	status enum.ClientStatus
	send chan []byte
	isClosed chan bool
	lastPing time.Time
}

func newWsClient(manager *wsManager, conn *websocket.Conn, id, name, ip string) *wsClient {
	return &amp;amp;wsClient{
		manager: manager,
		id: id,
		desc: fmt.Sprintf(&amp;quot;客户端(%s, %s)&amp;quot;, name, ip),
		conn: conn,
		status: enum.ClientStatusOffline,
		send: make(chan []byte),
		isClosed: make(chan bool),
		lastPing: time.Now(),
	}
}

// Read 读取客户端发送过来的消息
func (c *wsClient) Read() {
	defer func() {
		c.unRegister()
		logger.Info(c.desc, &amp;quot;read协程退出&amp;quot;)
	}()

	c.conn.SetReadLimit(maxMessageSize)
	c.conn.SetPingHandler(func(text string) error {
		// 只需要知道客户端还活着就行，不需要回复
		c.lastPing = time.Now()
		// 更新客户端状态
		clientStatus, _ := strconv.ParseInt(text, 10, 32)
		c.status = enum.ClientStatus(int32(clientStatus))
		return nil
	})

	for {
		msgType, data, err := c.conn.ReadMessage()
		if err != nil {
			logger.Error(c.desc, &amp;quot;c.conn.ReadMessage&amp;quot;, err.Error())
			break
		}

		switch msgType {
		case websocket.TextMessage:
			var msg *model.WsMessage
			err = json.Unmarshal(data, &amp;amp;msg)
			if err != nil {
				logger.Error(c.desc, &amp;quot;json.Unmarshal&amp;quot;, err.Error())
				break
			}

			switch msg.Type {
			default:
				logger.Info(c.desc, &amp;quot;未知消息类型&amp;quot;, string(data))
				c.send &amp;lt;- data
			}
		}
	}
}

// Write 把对应消息写回客户端
func (c *wsClient) Write() {
	defer func() {
		logger.Info(c.desc, &amp;quot;write协程退出&amp;quot;)
		c.unRegister()
	}()
	for {
		select {
		case &amp;lt;-c.isClosed:
			return
		case msg := &amp;lt;-c.send:
			err := c.conn.WriteMessage(websocket.TextMessage, msg)
			if err != nil {
				logger.Error(c.desc, &amp;quot;c.conn.WriteMessage&amp;quot;, err.Error())
				return
			}
		}
	}
}

// Check 检测客户端是否超时
func (c *wsClient) Check() {
	defer func() {
		logger.Info(c.desc, &amp;quot;check协程退出&amp;quot;)
	}()
	ticker := time.NewTicker(pingWait / 6)
	for {
		select {
		case &amp;lt;-c.isClosed:
			return
		case &amp;lt;-ticker.C:
			// 主动关闭连接
			if time.Now().Sub(c.lastPing) &amp;gt; pingWait {
				response.WsReturnErr(c.conn, enum.WsDataErr, &amp;quot;客户端超时，主动关闭连接&amp;quot;)
				logger.Info(c.desc, &amp;quot;客户端超时，主动关闭连接&amp;quot;)
				return
			}
		}
	}
}

func (c *wsClient) unRegister() {
	if c.manager.clients[c.id] != nil {
		c.manager.unRegister &amp;lt;- c
	}
}

&lt;/code>&lt;/pre>
&lt;h4 id="使用">使用&lt;/h4>
&lt;p>应当在控制器/入口处&lt;/p></description></item><item><title>Golang 协程更好的进行错误处理</title><link>/post/2022/06/02/29/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>/post/2022/06/02/29/</guid><description>&lt;h2 id="利用-channel-来传输多个-goroutine-中的-errors">利用 &lt;code>channel&lt;/code> 来传输多个 goroutine 中的 errors&lt;/h2>
&lt;p>Go 的经典哲学：不要通过共享内存来通信，而是通过通信来实现内存共享&lt;/p>
&lt;pre>&lt;code class="language-golang">func main() {
	cherrors := make(chan error)
	wgDone := make(chan bool)

	var wg sync.WaitGroup
	wg.Add(2)
	go func() {
		//... 业务逻辑
		wg.Done()
	}()
	go func() {
		//... 业务逻辑
		err := returnErr()
		if err != nil {
			cherrors &amp;lt;- err
		}
		wg.Done()
	}()
	go func() {
		wg.Wait()
		close(wgDone)
	}()

	select {
	case &amp;lt;-wgDone:
		break
	case err := &amp;lt;-cherrors:
		close(cherrors)
		fmt.Println(err)
	}

	time.Sleep(time.Second)
}

func returnErr() error {
	return errors.New(&amp;quot;出错啦。。我是错误信息&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;h2 id="使用-syncerrgroup">使用 &lt;code>sync/errgroup&lt;/code>&lt;/h2>
&lt;p>使用官方提供的&lt;code>golang.org/x/sync/errgroup&lt;/code>标准库&lt;/p></description></item><item><title>Golang 配置私有库</title><link>/post/2022/02/20/28/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>/post/2022/02/20/28/</guid><description>&lt;pre>&lt;code class="language-bash">git config --global url.&amp;quot;git@git.myscrm.cn:&amp;quot;.insteadOf &amp;quot;https://git.myscrm.cn/&amp;quot;
&lt;/code>&lt;/pre></description></item><item><title>SQL提交规范</title><link>/post/2022/02/18/27/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>/post/2022/02/18/27/</guid><description>&lt;h4 id="规范">规范&lt;/h4>
&lt;ol>
&lt;li>插入数据不可重复，使用 &lt;code>REPLACE INTO&lt;/code> 替代 &lt;code>INSERT INTO&lt;/code>
&lt;pre>&lt;code class="language-sql">REPLACE INTO tableName(columnName, ...) VALUES(...)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>添加表时，使用 &lt;code>IF NOT EXISTS&lt;/code>
&lt;pre>&lt;code class="language-sql">CREATE TABLE IF NOT EXISTS XXX
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>删除表时，可以使用 &lt;code>IF EXISTS&lt;/code>
&lt;pre>&lt;code class="language-sql">DROP TABLE IF EXISTS XXX
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>管理字段和索引时，使用存储过程
&lt;pre>&lt;code class="language-sql">CALL AddColumnIfNotExists ('ztc_room', 'introduction', 'VARCHAR(1000) NOT NULL DEFAULT \'\' COMMENT \'房源介绍\'');
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h4 id="常用存储过程">常用存储过程&lt;/h4>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>过程名&lt;/th>
 &lt;th>含义&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>AddColumnIfNotExists&lt;/td>
 &lt;td>添加字段（表名，字段名，字段描述）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>UpdateColumnIfExists&lt;/td>
 &lt;td>更新字段（表名，字段名，字段描述）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DropColumnIfExists&lt;/td>
 &lt;td>删除字段（表名，字段名）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CreateIndexIfNotExists&lt;/td>
 &lt;td>添加普通索引（表名，字段名）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CreateUniqueIndexIfNotExists&lt;/td>
 &lt;td>添加唯一索引（表名，字段名）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CreateIndexIfNotExistsWithColumns&lt;/td>
 &lt;td>添加组合普通索引（表名，索引名，字段名）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CreateUniqueIndexIfNotExistsWithColumns&lt;/td>
 &lt;td>添加组合唯一索引（表名，索引名，字段名）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DropIndexIfExists&lt;/td>
 &lt;td>删除索引（表名，索引名）&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;pre>&lt;code>DELIMITER $$
# AddColumnIfNotExists 添加字段
DROP
 PROCEDURE IF EXISTS AddColumnIfNotExists$$
CREATE PROCEDURE `AddColumnIfNotExists`(
 IN tableName varchar(100), IN columnName varchar(100),
 IN dbType varchar(100))
BEGIN
 DECLARE _tableCount INT;
 DECLARE _columnCount INT;

 SET
 _tableCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.TABLES
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName);

 SET
 _columnCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.COLUMNS
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND COLUMN_NAME = columnName);
 IF _tableCount = 1
 AND _columnCount = 0
 THEN
 SET
 @_sqlText = CONCAT(' ALTER TABLE `',
 tableName, '` ADD COLUMN `',
 columnName, '` ',
 dbType);
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1;
 DEALLOCATE PREPARE stmt1;
 END IF;
END$$

# UpdateColumnIfExists 更新字段
DROP
 PROCEDURE IF EXISTS UpdateColumnIfExists$$
CREATE PROCEDURE `UpdateColumnIfExists`(
 IN tableName varchar(100), IN columnName varchar(100),
 IN dbType varchar(100))
BEGIN
 DECLARE _columnCount INT;

 SET
 _columnCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.COLUMNS
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND COLUMN_NAME = columnName);
 IF
 _columnCount = 1 THEN
 SET
 @_sqlText = CONCAT(' ALTER TABLE `',
 tableName, '` MODIFY COLUMN `',
 columnName, '` ',
 dbType
 );
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1; DEALLOCATE PREPARE stmt1;
 END IF;
END$$

# DropColumnIfExists 删除字段
DROP
 PROCEDURE IF EXISTS DropColumnIfExists$$
CREATE PROCEDURE `DropColumnIfExists`(
 IN tableName varchar(100), IN columnName varchar(100))
BEGIN
 DECLARE _columnCount INT;

 SET
 _columnCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.COLUMNS
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND COLUMN_NAME = columnName);
 IF _columnCount = 1
 THEN
 SET
 @_sqlText = CONCAT(' ALTER TABLE ',
 tableName, ' DROP COLUMN ',
 columnName, ' ;'
 );
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1;
 DEALLOCATE PREPARE stmt1;
 END IF;
END$$

# CreateIndexIfNotExists 添加普通索引
DROP
 PROCEDURE IF EXISTS CreateIndexIfNotExists$$
CREATE PROCEDURE `CreateIndexIfNotExists`(
 IN tableName varchar(100), IN columnName varchar(100))
BEGIN
 DECLARE _tableCount INT;
 DECLARE _indexCount INT;

 SET
 _tableCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.TABLES
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName);

 SET
 _indexCount = (
 SELECT COUNT(1)
 FROM information_schema.statistics
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND INDEX_NAME = CONCAT('IX_',
 columnName)
 );
 IF _tableCount = 1
 AND _indexCount = 0
 THEN
 SET
 @_sqlText = CONCAT(' CREATE INDEX `IX_',
 columnName, '` ON `',
 tableName, '`(`',
 columnName, '` ASC);'
 );
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1; DEALLOCATE PREPARE stmt1;
 END IF;
END$$

# CreateUniqueIndexIfNotExists 添加唯一索引
DROP
 PROCEDURE IF EXISTS CreateUniqueIndexIfNotExists$$
CREATE PROCEDURE `CreateUniqueIndexIfNotExists`(
 IN tableName varchar(100), IN columnName varchar(100))
BEGIN
 DECLARE _tableCount INT;
 DECLARE _indexCount INT;

 SET
 _tableCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.TABLES
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName);

 SET
 _indexCount = (
 SELECT COUNT(1)
 FROM information_schema.statistics
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND INDEX_NAME = CONCAT('IX_',
 columnName)
 );
 IF _tableCount = 1
 AND _indexCount = 0
 THEN
 SET
 @_sqlText = CONCAT(' CREATE UNIQUE INDEX `IX_',
 columnName, '` ON `',
 tableName, '`(`',
 columnName, '` ASC);'
 );
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1; DEALLOCATE PREPARE stmt1;
 END IF;
END$$

# CreateIndexIfNotExistsWithColumns 添加组合普通索引
DROP
 PROCEDURE IF EXISTS CreateIndexIfNotExistsWithColumns$$
CREATE PROCEDURE `CreateIndexIfNotExistsWithColumns`(
 IN tableName varchar(200), IN indexName VARCHAR(200),
 IN columnName VARCHAR(200))
BEGIN
 DECLARE _tableCount INT;
 DECLARE _indexCount INT;

 SET
 _tableCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.TABLES
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName);

 SET
 _indexCount = (
 SELECT COUNT(1)
 FROM information_schema.statistics
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND INDEX_NAME = CONCAT('IX_',
 indexName)
 );
 IF _tableCount = 1
 AND _indexCount = 0
 THEN
 SET
 @_sqlText = CONCAT(' CREATE INDEX `IX_',
 indexName, '` ON `',
 tableName, '`(',
 columnName, ');
');
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1;
 DEALLOCATE PREPARE stmt1;
 END IF;
END$$

# CreateUniqueIndexIfNotExistsWithColumns 添加组合唯一索引
DROP
 PROCEDURE IF EXISTS CreateUniqueIndexIfNotExistsWithColumns$$
CREATE PROCEDURE `CreateUniqueIndexIfNotExistsWithColumns`(
 IN tableName VARCHAR(200), IN indexName VARCHAR(200),
 IN columnName VARCHAR(200))
BEGIN
 DECLARE _tableCount INT;
 DECLARE _indexCount INT;

 SET
 _tableCount = (
 SELECT COUNT(1)
 FROM INFORMATION_SCHEMA.TABLES
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName);

 SET
 _indexCount = (
 SELECT COUNT(1)
 FROM information_schema.statistics
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND INDEX_NAME = CONCAT('IX_',
 indexName)
 );
 IF _tableCount = 1
 AND _indexCount = 0
 THEN
 SET
 @_sqlText = CONCAT(' CREATE UNIQUE INDEX `IX_',
 indexName, '` ON `',
 tableName, '`(',
 columnName, ');
');
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1;
 DEALLOCATE PREPARE stmt1;
 END IF;
END$$

# DropIndexIfExists 删除索引
DROP
 PROCEDURE IF EXISTS DropIndexIfExists$$
CREATE PROCEDURE `DropIndexIfExists`(
 IN tableName varchar(100), IN indexName varchar(100))
BEGIN
 DECLARE _indexCount INT;

 SET
 _indexCount = (
 SELECT COUNT(1)
 FROM information_schema.statistics
 WHERE TABLE_SCHEMA = (
 SELECT SCHEMA(
 )
 )
 AND TABLE_NAME = tableName
 AND INDEX_NAME = CONCAT('IX_',
 indexName)
 );
 IF _indexCount &amp;gt; 0
 THEN
 SET
 @_sqlText = CONCAT(' DROP INDEX `IX_',
 indexName, '` ON `',
 tableName, '`; '
 );
 PREPARE stmt1
 FROM
 @_sqlText;
 EXECUTE stmt1; DEALLOCATE PREPARE stmt1;
 END IF;
END$$

DELIMITER ;
&lt;/code>&lt;/pre></description></item><item><title>Golang Defer理解</title><link>/post/2022/01/13/25/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>/post/2022/01/13/25/</guid><description>&lt;h3 id="结论">结论&lt;/h3>
&lt;ol>
&lt;li>多个defer的执行顺序为&lt;code>先进后出&lt;/code>&lt;/li>
&lt;li>匿名返回值是在&lt;code>return&lt;/code>执行时被声明，有名返回值则是在函数声明的同时被声明，因此在&lt;code>defer&lt;/code>语句中只能访问有名返回值，而不能直接访问匿名返回值&lt;/li>
&lt;li>&lt;code>return&lt;/code>其实应该包含前后两个步骤：第一步是给返回值赋值（若为有名返回值则直接赋值，若为匿名返回值则先声明再赋值）；第二步是调用&lt;code>RET&lt;/code>返回指令并传入返回值，而&lt;code>RET&lt;/code>则会检查&lt;code>defer&lt;/code>是否存在，若存在就先逆序插播defer语句，最后RET携带返回值退出函数&lt;/li>
&lt;li>延迟函数的参数在 defer 语句出现时就已经确定下来了（defer声明时会先计算确定参数的值，defer推迟执行的仅是其函数体）&lt;/li>
&lt;/ol>
&lt;h3 id="解释">解释&lt;/h3>
&lt;h5 id="结论1">结论1&lt;/h5>
&lt;pre>&lt;code class="language-golang">package main

func main() {
 for i := 0; i &amp;lt; 4; i++ {
 defer fmt.Print(i)
 }

 // Output:
 // 3
 // 2
 // 1
 // 0
}
&lt;/code>&lt;/pre>
&lt;h5 id="结论2和结论3">结论2和结论3&lt;/h5>
&lt;pre>&lt;code class="language-golang">package main

import (
 &amp;quot;fmt&amp;quot;
)

func main() {
 fmt.Println(a())

 // Output:
 // 1
 // 2
}

// 无名返回值
func a() int {
 defer func() { i++ }()
 return 1
}

// 有名返回值
func a() (i int) {
 defer func() { i++ }()
 return 1
}
&lt;/code>&lt;/pre>
&lt;h5 id="结论4">结论4&lt;/h5>
&lt;pre>&lt;code class="language-golang">package main

import (
 &amp;quot;fmt&amp;quot;
)

func main() {
 a()
 b()

 // Output:
 // 0
 // enter: b
 // in b
 // leave: b
}

func a() {
 i := 0
 defer fmt.Println(i) // 调用时i已经确定为0
 i++
 return
}

func trace(s string) s {
 fmt.Println(&amp;quot;enter: &amp;quot;, s)
 return s
}

func un(s) {
 fmt.Println(&amp;quot;leave: &amp;quot;, s)
}

func b() {
 defer un(trace(&amp;quot;b&amp;quot;)) // defer声明时会先计算确定参数的值，即执行了trace()，defer推迟执行的仅是其函数体un()
 fmt.Println(&amp;quot;in b&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-defer/#53-defer">《Go语言设计与实现》&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/developer/article/1410243">Golang中defer、return、返回值之间执行顺序的坑&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/huang_yong_peng/article/details/82950743">理解Golang中defer的使用&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Casbin 理解</title><link>/post/2021/12/31/24/</link><pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate><guid>/post/2021/12/31/24/</guid><description>&lt;h3 id="rbac">RBAC&lt;/h3>
&lt;p>model.conf&lt;/p>
&lt;pre>&lt;code class="language-conf">[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act

[role_definition]
g = _, _

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
m = g(r.sub, p.sub) &amp;amp;&amp;amp; r.obj == p.obj &amp;amp;&amp;amp; r.act == p.act
&lt;/code>&lt;/pre>
&lt;p>casbin_rule&lt;/p>
&lt;pre>&lt;code>p, alice, data1, read
p, bob, data2, write
p, data2_admin, data2, read
p, data2_admin, data2, write

g, alice, data2_admin
&lt;/code>&lt;/pre>
&lt;p>粗略将&lt;code>sub&lt;/code>可以理解为角色、用户，将&lt;code>obj&lt;/code>理解为资源，将&lt;code>act&lt;/code>理解为操作
当&lt;code>sub&lt;/code>为用户时，即用户直接对资源进行授权
当&lt;code>sub&lt;/code>为角色时，即用户分配有某角色，某角色对资源进行授权&lt;/p>
&lt;p>从上面的例子可以看出&lt;/p>
&lt;ol>
&lt;li>&lt;code>alice&lt;/code>被授予了对&lt;code>data1&lt;/code>资源的读权限&lt;/li>
&lt;li>&lt;code>bob&lt;/code>被授予了对&lt;code>data2&lt;/code>资源的写权限&lt;/li>
&lt;li>&lt;code>data2_admin&lt;/code>被授予了&lt;code>data2&lt;/code>的读写权限，我们可以把&lt;code>data2_admin&lt;/code>可以理解为角色&lt;/li>
&lt;li>将&lt;code>alice&lt;/code>分配有&lt;code>data2_admin&lt;/code>角色，则&lt;code>alice&lt;/code>此时具有对&lt;code>data2&lt;/code>的读写权限&lt;/li>
&lt;/ol>
&lt;p>p：&lt;code>用户、角色&lt;/code>对&lt;code>资源&lt;/code>的授权
g：将&lt;code>用户&lt;/code>分配有&lt;code>角色&lt;/code>组&lt;/p></description></item><item><title>Golang 通过通道控制携程数量</title><link>/post/2021/11/02/23/</link><pubDate>Tue, 02 Nov 2021 17:31:00 +0000</pubDate><guid>/post/2021/11/02/23/</guid><description>&lt;pre>&lt;code class="language-golang">func main() {
	var wg sync.WaitGroup
	var ch = make(chan bool, 10)
 for {
 wg.Add(1)
 ch &amp;lt;- true
 go func() {
 defer func() {
 &amp;lt;- ch
 wg.Done()
 }()
 // 逻辑
 ...
 }()
 }

 wg.Wait()
}
&lt;/code>&lt;/pre></description></item><item><title>Homebrew 安装软件加速</title><link>/post/2021/10/23/22/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>/post/2021/10/23/22/</guid><description>&lt;h2 id="加速">加速&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装代理软件 &lt;a href="https://github.com/yichengchen/clashX">https://github.com/yichengchen/clashX&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两种方法&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方法一（好处：可控，需要进行brew更新才使用；坏处：较为繁琐）&lt;/p>
&lt;p>在&lt;code>.bashrc&lt;/code>或&lt;code>.zshrc&lt;/code>设置&lt;/p>
&lt;pre>&lt;code class="language-shell"># ALIAS
alias proxy=&amp;quot;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890; echo 'Proxy on'&amp;quot;
alias unproxy=&amp;quot;unset https_proxy http_proxy all_proxy; echo 'Proxy off'&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>生效&lt;code>source .zshrc&lt;/code>&lt;/p>
&lt;p>每次iTerm2设置登录执行&lt;code>proxy&lt;/code>或手动执行&lt;code>proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>方法二（好处：便捷；坏处：可能影响其他命令）&lt;/p>
&lt;p>在&lt;code>.bashrc&lt;/code>或&lt;code>.zshrc&lt;/code>设置&lt;/p>
&lt;pre>&lt;code class="language-shell"># Proxy
export https_proxy=http://127.0.0.1:7890
export http_proxy=http://127.0.0.1:7890
export all_proxy=socks5://127.0.0.1:7890
&lt;/code>&lt;/pre>
&lt;p>生效&lt;code>source .zshrc&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>执行命令&lt;/p>
&lt;pre>&lt;code class="language-shell">/bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>按照指令安装&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行命令查看是否正常&lt;/p>
&lt;pre>&lt;code class="language-shell">brew -v

# output:
# Homebrew 3.2.17-133-g890190c
# Homebrew/homebrew-core (git revision 5d84b1431d6; last commit 2021-10-23)
# Homebrew/homebrew-cask (git revision 65500e81bf; last commit 2021-10-23)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="常用命令">常用命令&lt;/h2>
&lt;ul>
&lt;li>更新 Homebrew 自己&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew update
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>查看哪些安装包需要更新：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew outdated
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>列出已安装包&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew list
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>更新&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew upgrade # 更新所有的包
brew upgrade $FORMULA # 更新指定的包
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>清理旧版本&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew cleanup # 清理所有包的旧版本
brew cleanup $FORMULA # 清理指定包的旧版本
brew cleanup -n # 查看可清理的旧版本包，不执行实际操作
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>锁定不想更新的包&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew pin $FORMULA # 锁定某个包
brew unpin $FORMULA # 取消锁定
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>查看安装包的相关信息&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew info $FORMULA # 显示某个包的信息
brew info # 显示安装了包数量，文件数量，和总占用空间
brew deps --installed --tree # 查看已安装的包的依赖，树形显示
# `brew info` 可以查看包的相关信息，最有用的应该是包依赖和相应的命令。比如 Nginx 会提醒你怎么加 launchctl，PostgreSQL 会告诉你如何迁移数据库。这些信息会在包安装完成后自动显示，如果忘了的话可以用这个命令很方便地查看。
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>删除&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew rm $FORMULA # 删除某个包
brew uninstall --force $FORMULA # 删除所有版本
&lt;/code>&lt;/pre></description></item><item><title>Git相关配置</title><link>/post/2021/10/20/20/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>/post/2021/10/20/20/</guid><description>&lt;h4 id="用户名邮箱设置">用户名邮箱设置&lt;/h4>
&lt;p>系统级别&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --global user.name &amp;quot;xxx&amp;quot;
git config --global user.email &amp;quot;xxx@xxx.com&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>仓库级别&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --local user.name &amp;quot;xxx&amp;quot;
git config --local user.email &amp;quot;xxx@xxx.com&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="代理设置">代理设置&lt;/h4>
&lt;p>添加代理&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --local http.proxy &amp;quot;http://127.0.0.1:7890&amp;quot;
git config --local https.proxy &amp;quot;http://127.0.0.1:7890&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>删除代理&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --local --unset http.proxy
git config --local --unset https.proxy
&lt;/code>&lt;/pre></description></item><item><title>Linux 安装 Git</title><link>/post/2021/06/10/16/</link><pubDate>Thu, 10 Jun 2021 17:40:00 +0000</pubDate><guid>/post/2021/06/10/16/</guid><description>&lt;h3 id="场景">场景&lt;/h3>
&lt;p>一般来说linux安装通过&lt;code>yum&lt;/code>或者&lt;code>apt-get&lt;/code>命令安装即可，但是使用此类命令，git安装版本太低了，因此需要编译安装&lt;/p>
&lt;h3 id="源码安装git">源码安装Git&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>查看&lt;code>https://github.com/git/git/releases&lt;/code>版本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择需要下载的版本地址，比如&lt;code>2.32.1&lt;/code>，复制链接地址&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://imgtu.com/i/2RSIHg">&lt;img src="https://z3.ax1x.com/2021/06/10/2RSIHg.png" alt="复制链接地址">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>下载并解压，安装所需依赖，编译&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 下载
wget https://github.com/git/git/archive/refs/tags/v2.32.0.tar.gz
# 解压
tar -zxvf v2.32.0.tar.gz
# 安装所需依赖（如果编译出现确实依赖，按此方法安装即可）
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker
# 编译
cd v2.32.0.tar.gz &amp;amp;&amp;amp; make prefix=/usr/local/git all
# 安装
make prefix=/usr/local/git install
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>设置环境变量&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">vim etc/profile
# 添加环境
export PATH=$PATH:/usr/local/git/bin
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>安装完成&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 查看安装的git版本，校验通过，安装成功
git version
&lt;/code>&lt;/pre></description></item><item><title>Window Terminal配置</title><link>/post/2021/06/10/18/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><guid>/post/2021/06/10/18/</guid><description>&lt;h3 id="场景">场景&lt;/h3>
&lt;p>最近发现一个 Shell 利器，Windows Terminal，可以在微软商店自行下载&lt;/p>
&lt;h3 id="git-bash">Git-Bash&lt;/h3>
&lt;p>前置要求是安装好 Git，比如作者的 Git 目录为&lt;code>D:\Git&lt;/code>&lt;/p>
&lt;h4 id="配置">配置&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>点击设置
&lt;a href="https://imgtu.com/i/2RFyE8">&lt;img src="https://z3.ax1x.com/2021/06/10/2RFyE8.png" alt="2RFyE8.png">&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击左下角，新增，会出现一个默认配置，可以选择 json 编辑，也可以图形化配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>名称自由编辑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令行，填写 Git 安装目录下 bin 目录的 bin.exe，比如&lt;code>D:\Git\bin\bash.exe&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动目录，&lt;code>%USERPROFILE%&lt;/code>即可&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>总体算完成了&lt;/p>
&lt;h4 id="补充">补充&lt;/h4>
&lt;p>细心的读者会发现部分命令比如&lt;code>ll&lt;/code>在 git-bash 可以使用，但是在 Terminal 下的 bash 不能使用
需要我们自行添加&lt;/p>
&lt;pre>&lt;code># 编辑Git安装目录D:\Git\vendor\etc下的bash.bashrc文件
# 新增
alias ll=&amp;quot;ls -l&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>保存即可&lt;/p></description></item><item><title>Linux 安装 Golang</title><link>/post/2021/06/09/17/</link><pubDate>Wed, 09 Jun 2021 17:41:00 +0000</pubDate><guid>/post/2021/06/09/17/</guid><description>&lt;h3 id="场景">场景&lt;/h3>
&lt;p>使用&lt;code>yum&lt;/code>或&lt;code>apt-get&lt;/code>命令安装，版本不好控制，使用源码安装&lt;/p>
&lt;h3 id="源码安装">源码安装&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>查看&lt;code>https://studygolang.com/dl&lt;/code>所需安装版本的地址
&lt;a href="https://imgtu.com/i/2RP9Ug">&lt;img src="https://z3.ax1x.com/2021/06/10/2RP9Ug.png" alt="2RP9Ug.png">&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">wget https://studygolang.com/dl/golang/go1.15.13.linux-amd64.tar.gz
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>解压&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">tar -zxvf go1.15.13.linux-amd64.tar.gz
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>移动&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">mv go /usr/local/go
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>添加环境变量&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 打开
vim /etc/profile
# 添加
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
# 运行
source /etc/profile
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>安装完成&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 查看安装的go版本，校验通过，安装成功
go version
&lt;/code>&lt;/pre></description></item><item><title>Golang AES-128/GCM + BASE64 加密</title><link>/post/2021/03/15/14/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>/post/2021/03/15/14/</guid><description>&lt;p>需求背景：接入网络游戏防沉迷系统，其中请求体body需要进行加密，和签名&lt;/p>
&lt;h4 id="加密">加密&lt;/h4>
&lt;pre>&lt;code class="language-go">func GCMEncrypt(secretKey, originalText string) (string, error) {
	// 密钥需要解码
	key, _ := hex.DecodeString(secretKey)
	block, err := aes.NewCipher(key)
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}

	aesGcm, err := cipher.NewGCM(block)
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}
	
	// 向量
	nonce := make([]byte, aesGcm.NonceSize())
	if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
		return &amp;quot;&amp;quot;, err
	}

	cipherText := aesGcm.Seal(nonce, nonce, []byte(originalText), nil)

	// encode as base64 string
	encoded := base64.StdEncoding.EncodeToString(cipherText)
	return encoded, nil
}
&lt;/code>&lt;/pre>
&lt;h4 id="签名">签名&lt;/h4>
&lt;pre>&lt;code class="language-go">func (s *encryptService) Sign(headers, body map[string]string) string {
	var data string
	var keys []string
	// key排序
	for k := range headers {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	// 拼接
	for _, k := range keys {
		data = data + k + headers[k]
	}
	data = s.appSecret + data + gconv.String(body)

	// 对字符串进行sha256哈希
	h := sha256.New()
	h.Write([]byte(data))
	sum := h.Sum(nil)
	return hex.EncodeToString(sum)
}
&lt;/code>&lt;/pre>
&lt;h4 id="使用">使用&lt;/h4>
&lt;pre>&lt;code class="language-go">// 参数初始化
headers := map[string]string{
	&amp;quot;appId&amp;quot;: &amp;quot;xxxxxxxx&amp;quot;,
	&amp;quot;bizId&amp;quot;: &amp;quot;xxxxxxxx&amp;quot;,
	&amp;quot;timestamps&amp;quot;: strconv.Itoa(int(time.Now().UnixNano() / 1e6)),
}
// 请求体加密
jsonByte, _ := json.Marshal(req)
cipher, _ := GCMEncrypt(string(jsonByte), 'xxxxxxxxx') // 第二个参数是密钥
body := map[string]string{
	&amp;quot;data&amp;quot;: cipher,
}
// 生成签名
headers[&amp;quot;sign&amp;quot;] = Encrypt.Sign(headers, body)
headers[&amp;quot;Content-Type&amp;quot;] = &amp;quot;application/json&amp;quot;
.....发http请求
&lt;/code>&lt;/pre></description></item><item><title>Laravel 契约和门面简单解读</title><link>/post/2020/03/30/11/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>/post/2020/03/30/11/</guid><description>&lt;p>最近笔者正在理解Larvael服务容器、服务提供者、门面、契约的关系。
今天主要是记录自己借Laravel自带的Cache模块进行一个讲解。&lt;/p>
&lt;h3 id="代码和流程">代码和流程&lt;/h3>
&lt;p>首先我们打开&lt;code>config\app.php&lt;/code>中&lt;code>providers&lt;/code>下有一个服务提供者&lt;code>Illuminate\Cache\CacheServiceProvider::class&lt;/code>&lt;br>
我们看看他的服务提供者是怎么写的：&lt;/p>
&lt;pre>&lt;code>public function register()
 {
 $this-&amp;gt;app-&amp;gt;singleton('cache', function ($app) {
 return new CacheManager($app);
 });

 $this-&amp;gt;app-&amp;gt;singleton('cache.store', function ($app) {
 return $app['cache']-&amp;gt;driver();
 });

 $this-&amp;gt;app-&amp;gt;singleton('cache.psr6', function ($app) {
 return new Psr16Adapter($app['cache.store']);
 });

 $this-&amp;gt;app-&amp;gt;singleton('memcached.connector', function () {
 return new MemcachedConnector;
 });
 }
&lt;/code>&lt;/pre>
&lt;p>我们主要看&lt;code>cache&lt;/code>这个门面，它所单例绑定的是&lt;code>CacheManager&lt;/code>，我们继续深入&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php

namespace Illuminate\Cache;

use Aws\DynamoDb\DynamoDbClient;
use Closure;
use Illuminate\Contracts\Cache\Factory as FactoryContract;
use Illuminate\Contracts\Cache\Store;
use Illuminate\Contracts\Events\Dispatcher as DispatcherContract;
use Illuminate\Support\Arr;
use InvalidArgumentException;

/**
 * @mixin \Illuminate\Contracts\Cache\Repository
 */
class CacheManager implements FactoryContract
{
 /**
 * The application instance.
 *
 * @var \Illuminate\Contracts\Foundation\Application
 */
 protected $app;

 /**
 * The array of resolved cache stores.
 *
 * @var array
 */
 protected $stores = [];

 /**
 * The registered custom driver creators.
 *
 * @var array
 */
 protected $customCreators = [];

 /**
 * Create a new Cache manager instance.
 *
 * @param \Illuminate\Contracts\Foundation\Application $app
 * @return void
 */
 public function __construct($app)
 {
 $this-&amp;gt;app = $app;
 }

 /**
 * Get a cache store instance by name, wrapped in a repository.
 *
 * @param string|null $name
 * @return \Illuminate\Contracts\Cache\Repository
 */
 public function store($name = null)
 {
 $name = $name ?: $this-&amp;gt;getDefaultDriver();

 return $this-&amp;gt;stores[$name] = $this-&amp;gt;get($name);
 }

 /**
 * Get a cache driver instance.
 *
 * @param string|null $driver
 * @return \Illuminate\Contracts\Cache\Repository
 */
 public function driver($driver = null)
 {
 return $this-&amp;gt;store($driver);
 }

 /**
 * Attempt to get the store from the local cache.
 *
 * @param string $name
 * @return \Illuminate\Contracts\Cache\Repository
 */
 protected function get($name)
 {
 return $this-&amp;gt;stores[$name] ?? $this-&amp;gt;resolve($name);
 }

 /**
 * Resolve the given store.
 *
 * @param string $name
 * @return \Illuminate\Contracts\Cache\Repository
 *
 * @throws \InvalidArgumentException
 */
 protected function resolve($name)
 {
 $config = $this-&amp;gt;getConfig($name);

 if (is_null($config)) {
 throw new InvalidArgumentException(&amp;quot;Cache store [{$name}] is not defined.&amp;quot;);
 }

 if (isset($this-&amp;gt;customCreators[$config['driver']])) {
 return $this-&amp;gt;callCustomCreator($config);
 } else {
 $driverMethod = 'create'.ucfirst($config['driver']).'Driver';

 if (method_exists($this, $driverMethod)) {
 return $this-&amp;gt;{$driverMethod}($config);
 } else {
 throw new InvalidArgumentException(&amp;quot;Driver [{$config['driver']}] is not supported.&amp;quot;);
 }
 }
 }

 /**
 * Call a custom driver creator.
 *
 * @param array $config
 * @return mixed
 */
 protected function callCustomCreator(array $config)
 {
 return $this-&amp;gt;customCreators[$config['driver']]($this-&amp;gt;app, $config);
 }

 ......

 /**
 * Create an instance of the file cache driver.
 *
 * @param array $config
 * @return \Illuminate\Cache\Repository
 */
 protected function createFileDriver(array $config)
 {
 return $this-&amp;gt;repository(new FileStore($this-&amp;gt;app['files'], $config['path']));
 }

 /**
 * Create a new cache repository with the given implementation.
 *
 * @param \Illuminate\Contracts\Cache\Store $store
 * @return \Illuminate\Cache\Repository
 */
 public function repository(Store $store)
 {
 return tap(new Repository($store), function ($repository) {
 $this-&amp;gt;setEventDispatcher($repository);
 });
 }

 /**
 * Set the event dispatcher on the given repository instance.
 *
 * @param \Illuminate\Cache\Repository $repository
 * @return void
 */
 protected function setEventDispatcher(Repository $repository)
 {
 if (! $this-&amp;gt;app-&amp;gt;bound(DispatcherContract::class)) {
 return;
 }

 $repository-&amp;gt;setEventDispatcher(
 $this-&amp;gt;app[DispatcherContract::class]
 );
 }

 ......

 /**
 * Get the cache connection configuration.
 *
 * @param string $name
 * @return array
 */
 protected function getConfig($name)
 {
 return $this-&amp;gt;app['config'][&amp;quot;cache.stores.{$name}&amp;quot;];
 }

 ......

 /**
 * Dynamically call the default driver instance.
 *
 * @param string $method
 * @param array $parameters
 * @return mixed
 */
 public function __call($method, $parameters)
 {
 return $this-&amp;gt;store()-&amp;gt;$method(...$parameters);
 }
}

&lt;/code>&lt;/pre>
&lt;p>我们以Laravel默认的File存储讲起：&lt;/p></description></item><item><title>关于</title><link>/about/</link><pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate><guid>/about/</guid><description>&lt;h3 id="yoo-im-mingzaily-">Yoo, I&amp;rsquo;m mingzaily 👋&lt;/h3>
&lt;p>&lt;a href="https://github.com/mingzaily">&lt;img src="https://img.shields.io/badge/dynamic/json?logo=github&amp;amp;label=GitHub&amp;amp;labelColor=495867&amp;amp;color=495867&amp;amp;query=%24.data.totalSubs&amp;amp;url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dgithub%26queryKey%3Dmingzaily&amp;amp;style=flat-square" alt="GitHub">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>⚡ Golang / PHP.&lt;/li>
&lt;li>✍️ &lt;a href="https://www.mingzaily.com">Blogger&lt;/a>&lt;/li>
&lt;li>🏃 羽毛球&lt;/li>
&lt;li>🥋 电脑游戏，NAS&lt;/li>
&lt;li>♟ 中国象棋&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github-readme-stats.vercel.app/api?username=mingzaily" alt="">&lt;/p></description></item><item><title>数据库</title><link>/post/2019/10/18/8/</link><pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate><guid>/post/2019/10/18/8/</guid><description>&lt;h2 id="数据库架构">数据库架构&lt;/h2>
&lt;h3 id="数据库设计">数据库设计&lt;/h3>
&lt;ul>
&lt;li>程序实例
&lt;ul>
&lt;li>存储管理&lt;/li>
&lt;li>缓存机制&lt;/li>
&lt;li>SQL 解析&lt;/li>
&lt;li>日志管理&lt;/li>
&lt;li>权限划分&lt;/li>
&lt;li>容灾机制&lt;/li>
&lt;li>索引管理&lt;/li>
&lt;li>锁管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>存储（文件系统）&lt;/li>
&lt;/ul>
&lt;h3 id="索引模块">索引模块&lt;/h3>
&lt;p>官方方对索引的定义为：索引是帮助 MySQL 高效获取数据的数据结构&lt;/p>
&lt;ol>
&lt;li>
&lt;p>为什么要用索引&lt;/p>
&lt;ul>
&lt;li>快速查询数据&lt;/li>
&lt;li>保证数据的唯一性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>索引的优缺点&lt;/p>
&lt;ul>
&lt;li>优点
&lt;ul>
&lt;li>大大加快数据检索速度&lt;/li>
&lt;li>创建唯一索引，保证数据库表中每行数据的唯一性&lt;/li>
&lt;li>加速表之间的连接&lt;/li>
&lt;li>减少查询中分组和排序的时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>需要占用物理空间&lt;/li>
&lt;li>对表中数据进行增加、删除和修改时索引也要更新，降低了数据维护速度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>什么样的信息能成为索引&lt;/p>
&lt;ul>
&lt;li>主键、唯一键以及普通键等等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>索引的数据结构&lt;/p>
&lt;ul>
&lt;li>生成索引，建立二叉查找树进行二分查找 效率 O(logn)&lt;/li>
&lt;li>生成索引，建立 B-Tree 进行查找 效率 O(logn)
&lt;ul>
&lt;li>B-Tree&lt;/li>
&lt;li>根节点至少包括两个孩子&lt;/li>
&lt;li>树中每个节点最多含有 m 个孩子(m&amp;gt;=2)&lt;/li>
&lt;li>除根节点和叶子节点外，其他每个节点至少有 ceil(m/2)个孩子&lt;/li>
&lt;li>所有叶子节点都位于同一层&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生成索引，建立 B+-Tree 进行查找（主流）
&lt;ul>
&lt;li>定义基本与 B-Tree 一致&lt;/li>
&lt;li>非叶子节点的子树指针与关键字个数相同&lt;/li>
&lt;li>非叶子节点仅使用索引，数据都保存在叶子节点中&lt;/li>
&lt;li>所有叶子节点均有一个链指针指向下一个叶子节点&lt;/li>
&lt;li>B+-Tree 更适合用来做存储引擎
&lt;ul>
&lt;li>B+树的磁盘读写代价更低&lt;/li>
&lt;li>B+树的查询效率更加稳定&lt;/li>
&lt;li>B+树更有利于对数据库的扫描&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生成索引，建立 Hash 结构进行查找
&lt;ul>
&lt;li>查询效率更高&lt;/li>
&lt;li>缺点
&lt;ul>
&lt;li>仅仅能满足&amp;quot;=&amp;quot;，&amp;ldquo;IN&amp;rdquo;，不能使用范围查询&lt;/li>
&lt;li>无法被用来避免数据的排序操作&lt;/li>
&lt;li>不能利用部分索引键查询&lt;/li>
&lt;li>不能避免表扫码&lt;/li>
&lt;li>遇到大量 Hash 值相等的情况后性能并不一定就会比 B-Tree 索引高&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>BitMap 索引&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>密集索引和稀疏索引的区别&lt;/p></description></item><item><title>计算机网络</title><link>/post/2019/10/18/7/</link><pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate><guid>/post/2019/10/18/7/</guid><description>&lt;h2 id="网络基础">网络基础&lt;/h2>
&lt;h3 id="osi-模型">OSI 模型&lt;/h3>
&lt;h4 id="表格">表格&lt;/h4>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>概念层&lt;/th>
 &lt;th>数据单位&lt;/th>
 &lt;th>作用&lt;/th>
 &lt;th>设备&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>物理层&lt;/td>
 &lt;td>比特&lt;/td>
 &lt;td>提供光纤标准、传送数据的通路，传输比特流&lt;/td>
 &lt;td>网线等等&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>数据链路层&lt;/td>
 &lt;td>数据帧&lt;/td>
 &lt;td>帧定界和帧同步;顺序控制，指对帧的收发顺序的控制；差错检测和恢复；APR、RARP 协议&lt;/td>
 &lt;td>交互机、网桥&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>网络层&lt;/td>
 &lt;td>数据分组或数据包&lt;/td>
 &lt;td>两个主机系统之间提供连接和路径选择&lt;/td>
 &lt;td>路由器&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>传输层&lt;/td>
 &lt;td>报文段&lt;/td>
 &lt;td>定义传输协议和端口；分段传输，到达目的地址后重组&lt;/td>
 &lt;td>-&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>会话层&lt;/td>
 &lt;td>-&lt;/td>
 &lt;td>管理应用程序间的通信&lt;/td>
 &lt;td>-&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>表示层&lt;/td>
 &lt;td>-&lt;/td>
 &lt;td>把应用层提供的信息变换为能够共同理解的形式、保证各系统、应用可以读取&lt;/td>
 &lt;td>-&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>应用层&lt;/td>
 &lt;td>-&lt;/td>
 &lt;td>应用层协议，如 HTTP 协议&lt;/td>
 &lt;td>-&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="总结">总结&lt;/h4>
&lt;ul>
&lt;li>下面 4 层（物理层、数据链路层、网络层和传输层）主要提供数据传输和交换功能，即以节点到节点之间的通信为主；&lt;/li>
&lt;li>第 4 层(传输成 TCP/UDP)作为上下两部分的桥梁，是整个网络体系结构中最关键的部分；&lt;/li>
&lt;li>简言之，下 4 层主要完成通信子网的功能，上 3 层主要完成资源子网的功能。&lt;/li>
&lt;/ul>
&lt;h3 id="tcpip-四层模型">TCP/IP 四层模型&lt;/h3>
&lt;p>TCP/IP 又叫网际协议群，可以说是 OSI 模型的实现，强调在计算机上实现协议应该开发哪种程序&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>概念层&lt;/th>
 &lt;th>TCP/IP 协议群&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>应用层&lt;/td>
 &lt;td>FTP、HTTP、Telnt&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>数据链路层&lt;/td>
 &lt;td>TCP、UDP&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>网络层&lt;/td>
 &lt;td>IP、ICMP、RIP、OSFF，ICMP，BGF&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>网络接口层/链路层&lt;/td>
 &lt;td>ISO、IEEE 标准&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="tcp-三次握手四次挥手">TCP 三次握手&amp;amp;四次挥手&lt;/h2>
&lt;h3 id="报文格式">报文格式&lt;/h3>
&lt;p>TCP Tags&lt;/p></description></item><item><title>说说</title><link>/shuoshuo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shuoshuo/</guid><description/></item></channel></rss>