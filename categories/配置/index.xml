<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置 on 星河</title><link>/categories/%E9%85%8D%E7%BD%AE/</link><description>Recent content in 配置 on 星河</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 05 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E9%85%8D%E7%BD%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>Mac 配置 zsh</title><link>/post/2024/02/05/54/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>/post/2024/02/05/54/</guid><description>&lt;h2 id="1-使用-zsh-作为默认-shell">1. 使用 zsh 作为默认 shell&lt;/h2>
&lt;p>从 macOS Catalina 版开始，您的 Mac 将使用 zsh 作为默认登录 Shell 和交互式 Shell。您还可以在较低版本的 macOS 中将 zsh 设置为默认 Shell。&lt;/p>
&lt;pre>&lt;code class="language-bash">chsh -s /bin/zsh
&lt;/code>&lt;/pre>
&lt;p>参看：&lt;a href="https://support.apple.com/zh-cn/HT208050">在 Mac 上将 zsh 用作默认 Shell&lt;/a>&lt;/p>
&lt;h2 id="2-安装-oh-my-zsh">2. 安装 oh-my-zsh&lt;/h2>
&lt;h3 id="自动安装">自动安装&lt;/h3>
&lt;pre>&lt;code class="language-bash">sh -c &amp;quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>也可以手动安装：&lt;/p>
&lt;h3 id="手动安装">手动安装&lt;/h3>
&lt;p>下载 oh-my-zsh&lt;/p>
&lt;pre>&lt;code class="language-bash">git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
&lt;/code>&lt;/pre>
&lt;p>备份原有 ~/.zshrc（如果有）&lt;/p>
&lt;pre>&lt;code class="language-bash">cp ~/.zshrc ~/.zshrc.bak
&lt;/code>&lt;/pre>
&lt;p>从模板创建 zsh 配置文件&lt;/p>
&lt;pre>&lt;code>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/code>&lt;/pre>
&lt;h2 id="3-更改-zsh-主题">3. 更改 zsh 主题&lt;/h2>
&lt;p>主题样式 &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">这里&lt;/a> 查看。&lt;/p></description></item><item><title>Golang 配置私有库</title><link>/post/2022/02/20/28/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>/post/2022/02/20/28/</guid><description>&lt;pre>&lt;code class="language-bash">git config --global url.&amp;quot;git@git.myscrm.cn:&amp;quot;.insteadOf &amp;quot;https://git.myscrm.cn/&amp;quot;
&lt;/code>&lt;/pre></description></item><item><title>Homebrew 安装软件加速</title><link>/post/2021/10/23/22/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>/post/2021/10/23/22/</guid><description>&lt;h2 id="加速">加速&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装代理软件 &lt;a href="https://github.com/yichengchen/clashX">https://github.com/yichengchen/clashX&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两种方法&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方法一（好处：可控，需要进行brew更新才使用；坏处：较为繁琐）&lt;/p>
&lt;p>在&lt;code>.bashrc&lt;/code>或&lt;code>.zshrc&lt;/code>设置&lt;/p>
&lt;pre>&lt;code class="language-shell"># ALIAS
alias proxy=&amp;quot;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890; echo 'Proxy on'&amp;quot;
alias unproxy=&amp;quot;unset https_proxy http_proxy all_proxy; echo 'Proxy off'&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>生效&lt;code>source .zshrc&lt;/code>&lt;/p>
&lt;p>每次iTerm2设置登录执行&lt;code>proxy&lt;/code>或手动执行&lt;code>proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>方法二（好处：便捷；坏处：可能影响其他命令）&lt;/p>
&lt;p>在&lt;code>.bashrc&lt;/code>或&lt;code>.zshrc&lt;/code>设置&lt;/p>
&lt;pre>&lt;code class="language-shell"># Proxy
export https_proxy=http://127.0.0.1:7890
export http_proxy=http://127.0.0.1:7890
export all_proxy=socks5://127.0.0.1:7890
&lt;/code>&lt;/pre>
&lt;p>生效&lt;code>source .zshrc&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>执行命令&lt;/p>
&lt;pre>&lt;code class="language-shell">/bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>按照指令安装&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行命令查看是否正常&lt;/p>
&lt;pre>&lt;code class="language-shell">brew -v

# output:
# Homebrew 3.2.17-133-g890190c
# Homebrew/homebrew-core (git revision 5d84b1431d6; last commit 2021-10-23)
# Homebrew/homebrew-cask (git revision 65500e81bf; last commit 2021-10-23)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="常用命令">常用命令&lt;/h2>
&lt;ul>
&lt;li>更新 Homebrew 自己&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew update
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>查看哪些安装包需要更新：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew outdated
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>列出已安装包&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew list
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>更新&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew upgrade # 更新所有的包
brew upgrade $FORMULA # 更新指定的包
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>清理旧版本&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew cleanup # 清理所有包的旧版本
brew cleanup $FORMULA # 清理指定包的旧版本
brew cleanup -n # 查看可清理的旧版本包，不执行实际操作
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>锁定不想更新的包&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew pin $FORMULA # 锁定某个包
brew unpin $FORMULA # 取消锁定
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>查看安装包的相关信息&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew info $FORMULA # 显示某个包的信息
brew info # 显示安装了包数量，文件数量，和总占用空间
brew deps --installed --tree # 查看已安装的包的依赖，树形显示
# `brew info` 可以查看包的相关信息，最有用的应该是包依赖和相应的命令。比如 Nginx 会提醒你怎么加 launchctl，PostgreSQL 会告诉你如何迁移数据库。这些信息会在包安装完成后自动显示，如果忘了的话可以用这个命令很方便地查看。
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>删除&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">brew rm $FORMULA # 删除某个包
brew uninstall --force $FORMULA # 删除所有版本
&lt;/code>&lt;/pre></description></item><item><title>Git相关配置</title><link>/post/2021/10/20/20/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>/post/2021/10/20/20/</guid><description>&lt;h4 id="用户名邮箱设置">用户名邮箱设置&lt;/h4>
&lt;p>系统级别&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --global user.name &amp;quot;xxx&amp;quot;
git config --global user.email &amp;quot;xxx@xxx.com&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>仓库级别&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --local user.name &amp;quot;xxx&amp;quot;
git config --local user.email &amp;quot;xxx@xxx.com&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="代理设置">代理设置&lt;/h4>
&lt;p>添加代理&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --local http.proxy &amp;quot;http://127.0.0.1:7890&amp;quot;
git config --local https.proxy &amp;quot;http://127.0.0.1:7890&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>删除代理&lt;/p>
&lt;pre>&lt;code class="language-shell">git config --local --unset http.proxy
git config --local --unset https.proxy
&lt;/code>&lt;/pre></description></item><item><title>Linux 安装 Git</title><link>/post/2021/06/10/16/</link><pubDate>Thu, 10 Jun 2021 17:40:00 +0000</pubDate><guid>/post/2021/06/10/16/</guid><description>&lt;h3 id="场景">场景&lt;/h3>
&lt;p>一般来说linux安装通过&lt;code>yum&lt;/code>或者&lt;code>apt-get&lt;/code>命令安装即可，但是使用此类命令，git安装版本太低了，因此需要编译安装&lt;/p>
&lt;h3 id="源码安装git">源码安装Git&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>查看&lt;code>https://github.com/git/git/releases&lt;/code>版本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择需要下载的版本地址，比如&lt;code>2.32.1&lt;/code>，复制链接地址&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://imgtu.com/i/2RSIHg">&lt;img src="https://z3.ax1x.com/2021/06/10/2RSIHg.png" alt="复制链接地址">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>下载并解压，安装所需依赖，编译&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 下载
wget https://github.com/git/git/archive/refs/tags/v2.32.0.tar.gz
# 解压
tar -zxvf v2.32.0.tar.gz
# 安装所需依赖（如果编译出现确实依赖，按此方法安装即可）
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker
# 编译
cd v2.32.0.tar.gz &amp;amp;&amp;amp; make prefix=/usr/local/git all
# 安装
make prefix=/usr/local/git install
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>设置环境变量&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">vim etc/profile
# 添加环境
export PATH=$PATH:/usr/local/git/bin
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>安装完成&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 查看安装的git版本，校验通过，安装成功
git version
&lt;/code>&lt;/pre></description></item><item><title>Window Terminal配置</title><link>/post/2021/06/10/18/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><guid>/post/2021/06/10/18/</guid><description>&lt;h3 id="场景">场景&lt;/h3>
&lt;p>最近发现一个 Shell 利器，Windows Terminal，可以在微软商店自行下载&lt;/p>
&lt;h3 id="git-bash">Git-Bash&lt;/h3>
&lt;p>前置要求是安装好 Git，比如作者的 Git 目录为&lt;code>D:\Git&lt;/code>&lt;/p>
&lt;h4 id="配置">配置&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>点击设置
&lt;a href="https://imgtu.com/i/2RFyE8">&lt;img src="https://z3.ax1x.com/2021/06/10/2RFyE8.png" alt="2RFyE8.png">&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击左下角，新增，会出现一个默认配置，可以选择 json 编辑，也可以图形化配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>名称自由编辑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令行，填写 Git 安装目录下 bin 目录的 bin.exe，比如&lt;code>D:\Git\bin\bash.exe&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动目录，&lt;code>%USERPROFILE%&lt;/code>即可&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>总体算完成了&lt;/p>
&lt;h4 id="补充">补充&lt;/h4>
&lt;p>细心的读者会发现部分命令比如&lt;code>ll&lt;/code>在 git-bash 可以使用，但是在 Terminal 下的 bash 不能使用
需要我们自行添加&lt;/p>
&lt;pre>&lt;code># 编辑Git安装目录D:\Git\vendor\etc下的bash.bashrc文件
# 新增
alias ll=&amp;quot;ls -l&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>保存即可&lt;/p></description></item><item><title>Linux 安装 Golang</title><link>/post/2021/06/09/17/</link><pubDate>Wed, 09 Jun 2021 17:41:00 +0000</pubDate><guid>/post/2021/06/09/17/</guid><description>&lt;h3 id="场景">场景&lt;/h3>
&lt;p>使用&lt;code>yum&lt;/code>或&lt;code>apt-get&lt;/code>命令安装，版本不好控制，使用源码安装&lt;/p>
&lt;h3 id="源码安装">源码安装&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>查看&lt;code>https://studygolang.com/dl&lt;/code>所需安装版本的地址
&lt;a href="https://imgtu.com/i/2RP9Ug">&lt;img src="https://z3.ax1x.com/2021/06/10/2RP9Ug.png" alt="2RP9Ug.png">&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">wget https://studygolang.com/dl/golang/go1.15.13.linux-amd64.tar.gz
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>解压&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">tar -zxvf go1.15.13.linux-amd64.tar.gz
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>移动&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell">mv go /usr/local/go
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>添加环境变量&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 打开
vim /etc/profile
# 添加
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
# 运行
source /etc/profile
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>安装完成&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-shell"># 查看安装的go版本，校验通过，安装成功
go version
&lt;/code>&lt;/pre></description></item></channel></rss>