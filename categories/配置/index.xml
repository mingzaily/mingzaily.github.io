<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>配置 on 星河</title>
    <link>/categories/%E9%85%8D%E7%BD%AE/</link>
    <description>Recent content in 配置 on 星河</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 05 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/%E9%85%8D%E7%BD%AE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mac 配置 zsh</title>
      <link>/post/2024/02/05/54/</link>
      <pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate>
      <guid>/post/2024/02/05/54/</guid>
      <description>&lt;h2 id=&#34;1-使用-zsh-作为默认-shell&#34;&gt;1. 使用 zsh 作为默认 shell&lt;/h2&gt;&#xA;&lt;p&gt;从 macOS Catalina 版开始，您的 Mac 将使用 zsh 作为默认登录 Shell 和交互式 Shell。您还可以在较低版本的 macOS 中将 zsh 设置为默认 Shell。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsh -s /bin/zsh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;参看：&lt;a href=&#34;https://support.apple.com/zh-cn/HT208050&#34;&gt;在 Mac 上将 zsh 用作默认 Shell&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-安装-oh-my-zsh&#34;&gt;2. 安装 oh-my-zsh&lt;/h2&gt;&#xA;&lt;h3 id=&#34;自动安装&#34;&gt;自动安装&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh -c &amp;quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;也可以手动安装：&lt;/p&gt;&#xA;&lt;h3 id=&#34;手动安装&#34;&gt;手动安装&lt;/h3&gt;&#xA;&lt;p&gt;下载 oh-my-zsh&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;备份原有 ~/.zshrc（如果有）&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp ~/.zshrc ~/.zshrc.bak&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;从模板创建 zsh 配置文件&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;3-更改-zsh-主题&#34;&gt;3. 更改 zsh 主题&lt;/h2&gt;&#xA;&lt;p&gt;主题样式 &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/Themes&#34;&gt;这里&lt;/a&gt; 查看。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 配置私有库</title>
      <link>/post/2022/02/20/28/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/2022/02/20/28/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global url.&amp;quot;git@git.myscrm.cn:&amp;quot;.insteadOf &amp;quot;https://git.myscrm.cn/&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Homebrew 安装软件加速</title>
      <link>/post/2021/10/23/22/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/10/23/22/</guid>
      <description>&lt;h2 id=&#34;加速&#34;&gt;加速&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装代理软件 &lt;a href=&#34;https://github.com/yichengchen/clashX&#34;&gt;https://github.com/yichengchen/clashX&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;两种方法&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;方法一（好处：可控，需要进行brew更新才使用；坏处：较为繁琐）&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;.bashrc&lt;/code&gt;或&lt;code&gt;.zshrc&lt;/code&gt;设置&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# ALIAS&#xA;alias proxy=&amp;quot;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890; echo &#39;Proxy on&#39;&amp;quot;&#xA;alias unproxy=&amp;quot;unset https_proxy http_proxy all_proxy; echo &#39;Proxy off&#39;&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;生效&lt;code&gt;source .zshrc&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;每次iTerm2设置登录执行&lt;code&gt;proxy&lt;/code&gt;或手动执行&lt;code&gt;proxy&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;方法二（好处：便捷；坏处：可能影响其他命令）&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;.bashrc&lt;/code&gt;或&lt;code&gt;.zshrc&lt;/code&gt;设置&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Proxy&#xA;export https_proxy=http://127.0.0.1:7890&#xA;export http_proxy=http://127.0.0.1:7890&#xA;export all_proxy=socks5://127.0.0.1:7890&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;生效&lt;code&gt;source .zshrc&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;执行命令&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;按照指令安装&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;执行命令查看是否正常&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew -v&#xA;&#xA;# output:&#xA;# Homebrew 3.2.17-133-g890190c&#xA;# Homebrew/homebrew-core (git revision 5d84b1431d6; last commit 2021-10-23)&#xA;# Homebrew/homebrew-cask (git revision 65500e81bf; last commit 2021-10-23)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;常用命令&#34;&gt;常用命令&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更新 Homebrew 自己&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew update&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查看哪些安装包需要更新：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew outdated&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;列出已安装包&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew list&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew upgrade             # 更新所有的包&#xA;brew upgrade $FORMULA    # 更新指定的包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;清理旧版本&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew cleanup             # 清理所有包的旧版本&#xA;brew cleanup $FORMULA    # 清理指定包的旧版本&#xA;brew cleanup -n          # 查看可清理的旧版本包，不执行实际操作&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁定不想更新的包&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew pin $FORMULA      # 锁定某个包&#xA;brew unpin $FORMULA    # 取消锁定&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查看安装包的相关信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew info $FORMULA    # 显示某个包的信息&#xA;brew info             # 显示安装了包数量，文件数量，和总占用空间&#xA;brew deps --installed --tree # 查看已安装的包的依赖，树形显示&#xA;# `brew info` 可以查看包的相关信息，最有用的应该是包依赖和相应的命令。比如 Nginx 会提醒你怎么加 launchctl，PostgreSQL 会告诉你如何迁移数据库。这些信息会在包安装完成后自动显示，如果忘了的话可以用这个命令很方便地查看。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;删除&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew rm $FORMULA                # 删除某个包&#xA;brew uninstall --force $FORMULA # 删除所有版本&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Git相关配置</title>
      <link>/post/2021/10/20/20/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/10/20/20/</guid>
      <description>&lt;h4 id=&#34;用户名邮箱设置&#34;&gt;用户名邮箱设置&lt;/h4&gt;&#xA;&lt;p&gt;系统级别&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global user.name &amp;quot;xxx&amp;quot;&#xA;git config --global user.email &amp;quot;xxx@xxx.com&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;仓库级别&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --local user.name &amp;quot;xxx&amp;quot;&#xA;git config --local user.email &amp;quot;xxx@xxx.com&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;代理设置&#34;&gt;代理设置&lt;/h4&gt;&#xA;&lt;p&gt;添加代理&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --local http.proxy &amp;quot;http://127.0.0.1:7890&amp;quot;&#xA;git config --local https.proxy &amp;quot;http://127.0.0.1:7890&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;删除代理&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --local --unset http.proxy&#xA;git config --local --unset https.proxy&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Linux 安装 Git</title>
      <link>/post/2021/06/10/16/</link>
      <pubDate>Thu, 10 Jun 2021 17:40:00 +0000</pubDate>
      <guid>/post/2021/06/10/16/</guid>
      <description>&lt;h3 id=&#34;场景&#34;&gt;场景&lt;/h3&gt;&#xA;&lt;p&gt;一般来说linux安装通过&lt;code&gt;yum&lt;/code&gt;或者&lt;code&gt;apt-get&lt;/code&gt;命令安装即可，但是使用此类命令，git安装版本太低了，因此需要编译安装&lt;/p&gt;&#xA;&lt;h3 id=&#34;源码安装git&#34;&gt;源码安装Git&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查看&lt;code&gt;https://github.com/git/git/releases&lt;/code&gt;版本&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;选择需要下载的版本地址，比如&lt;code&gt;2.32.1&lt;/code&gt;，复制链接地址&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://imgtu.com/i/2RSIHg&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/06/10/2RSIHg.png&#34; alt=&#34;复制链接地址&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下载并解压，安装所需依赖，编译&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 下载&#xA;wget https://github.com/git/git/archive/refs/tags/v2.32.0.tar.gz&#xA;# 解压&#xA;tar -zxvf v2.32.0.tar.gz&#xA;# 安装所需依赖（如果编译出现确实依赖，按此方法安装即可）&#xA;yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker&#xA;# 编译&#xA;cd v2.32.0.tar.gz &amp;amp;&amp;amp; make prefix=/usr/local/git all&#xA;# 安装&#xA;make prefix=/usr/local/git install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置环境变量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim etc/profile&#xA;# 添加环境&#xA;export PATH=$PATH:/usr/local/git/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 查看安装的git版本，校验通过，安装成功&#xA;git version&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Window Terminal配置</title>
      <link>/post/2021/06/10/18/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/post/2021/06/10/18/</guid>
      <description>&lt;h3 id=&#34;场景&#34;&gt;场景&lt;/h3&gt;&#xA;&lt;p&gt;最近发现一个 Shell 利器，Windows Terminal，可以在微软商店自行下载&lt;/p&gt;&#xA;&lt;h3 id=&#34;git-bash&#34;&gt;Git-Bash&lt;/h3&gt;&#xA;&lt;p&gt;前置要求是安装好 Git，比如作者的 Git 目录为&lt;code&gt;D:\Git&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;配置&#34;&gt;配置&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;点击设置&#xA;&lt;a href=&#34;https://imgtu.com/i/2RFyE8&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/06/10/2RFyE8.png&#34; alt=&#34;2RFyE8.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;点击左下角，新增，会出现一个默认配置，可以选择 json 编辑，也可以图形化配置&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;名称自由编辑&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;命令行，填写 Git 安装目录下 bin 目录的 bin.exe，比如&lt;code&gt;D:\Git\bin\bash.exe&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;启动目录，&lt;code&gt;%USERPROFILE%&lt;/code&gt;即可&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;总体算完成了&lt;/p&gt;&#xA;&lt;h4 id=&#34;补充&#34;&gt;补充&lt;/h4&gt;&#xA;&lt;p&gt;细心的读者会发现部分命令比如&lt;code&gt;ll&lt;/code&gt;在 git-bash 可以使用，但是在 Terminal 下的 bash 不能使用&#xA;需要我们自行添加&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 编辑Git安装目录D:\Git\vendor\etc下的bash.bashrc文件&#xA;# 新增&#xA;alias ll=&amp;quot;ls -l&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;保存即可&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 安装 Golang</title>
      <link>/post/2021/06/09/17/</link>
      <pubDate>Wed, 09 Jun 2021 17:41:00 +0000</pubDate>
      <guid>/post/2021/06/09/17/</guid>
      <description>&lt;h3 id=&#34;场景&#34;&gt;场景&lt;/h3&gt;&#xA;&lt;p&gt;使用&lt;code&gt;yum&lt;/code&gt;或&lt;code&gt;apt-get&lt;/code&gt;命令安装，版本不好控制，使用源码安装&lt;/p&gt;&#xA;&lt;h3 id=&#34;源码安装&#34;&gt;源码安装&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查看&lt;code&gt;https://studygolang.com/dl&lt;/code&gt;所需安装版本的地址&#xA;&lt;a href=&#34;https://imgtu.com/i/2RP9Ug&#34;&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/06/10/2RP9Ug.png&#34; alt=&#34;2RP9Ug.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;下载&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://studygolang.com/dl/golang/go1.15.13.linux-amd64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;解压&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tar -zxvf go1.15.13.linux-amd64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;移动&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mv go /usr/local/go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;添加环境变量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 打开&#xA;vim /etc/profile&#xA;# 添加&#xA;export GOROOT=/usr/local/go&#xA;export PATH=$PATH:$GOROOT/bin&#xA;# 运行&#xA;source /etc/profile&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安装完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 查看安装的go版本，校验通过，安装成功&#xA;go version&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
